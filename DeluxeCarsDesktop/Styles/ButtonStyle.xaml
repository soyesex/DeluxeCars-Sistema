<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:fa="clr-namespace:FontAwesome.Sharp;assembly=FontAwesome.Sharp">

    <SolidColorBrush x:Key="PrimaryBackgroundColor" Color="#1F2A44"/>
    <SolidColorBrush x:Key="PrimaryBorderColor" Color="#4D5B7C"/>
    <SolidColorBrush x:Key="HighlightBorderColor" Color="#28AEED"/>
    <SolidColorBrush x:Key="PrimaryTextColor" Color="#E0E6F1"/>
    <SolidColorBrush x:Key="PlaceholderTextColor" Color="#8A93A2" />

    <SolidColorBrush x:Key="ButtonPrimaryBackground" Color="#512bd4"/>
    <SolidColorBrush x:Key="ButtonPrimaryHover" Color="#6A44E6"/>
    <SolidColorBrush x:Key="ButtonSecondaryHover" Color="#2C3A5A"/>
    <SolidColorBrush x:Key="ButtonDestructiveBorder" Color="#D93A3A"/>
    <SolidColorBrush x:Key="ButtonDestructiveHover" Color="#D93A3A"/>
    <SolidColorBrush x:Key="ButtonDisabledBackground" Color="#2D3748"/>
    <SolidColorBrush x:Key="ButtonDisabledForeground" Color="#6A7383"/>

    <Color x:Key="Color.WinBorder1">#8A2BE2</Color>
    <Color x:Key="Color.WinBorder2">#ADFF2F</Color>
    <Color x:Key="Color.WinBorder3">#FFD700</Color>
    <Color x:Key="Color.PrimaryBack1">#1C2630</Color>
    <Color x:Key="Color.PrimaryBack2">#080C0F</Color>

    <SolidColorBrush x:Key="TextPrimaryColor" Color="#E0E0E0"/>
    <SolidColorBrush x:Key="TextSecondaryColor" Color="#A9A9A9"/>
    <SolidColorBrush x:Key="TextErrorColor" Color="#D7596D"/>

    <Style x:Key="DataGridActionButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="35"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Margin" Value="5,0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="DataGridIconStyle" TargetType="fa:IconImage">
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Foreground" Value="{StaticResource TextSecondaryColor}"/>
    </Style>

    <Style x:Key="DataGridIconSharpButton_Style" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Margin" Value="2,0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{StaticResource TextPrimaryColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" CornerRadius="15">
                        <fa:IconImage Icon="{Binding Tag, RelativeSource={RelativeSource AncestorType=Button}}"
                                  Style="{StaticResource DataGridIconStyle}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource PrimaryBorderColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CardDescriptionStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Opacity" Value="0.7"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,10,0,0"/>
    </Style>

    <Style x:Key="ReportCardStyle" TargetType="ListBoxItem">
        <Setter Property="Background" Value="{StaticResource secundaryBackColor1}"/>
        <Setter Property="BorderBrush" Value="{StaticResource PrimaryBorderColor}"/>
        <Setter Property="Foreground" Value="{StaticResource PrimaryTextColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Padding" Value="15"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="15"
                            SnapsToDevicePixels="True">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource HighlightBorderColor}"/>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource secundaryBackColor2}"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource HighlightBorderColor}"/>
                            <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                            <Setter Property="Foreground" Value="White"/>
                            <Setter Property="FontWeight" Value="SemiBold"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CardTitleStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Foreground" Value="{StaticResource PrimaryTextColor}"/>
        <Setter Property="Margin" Value="0,0,0,10"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="CardButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource secundaryBackColor1}"/>
        <Setter Property="BorderBrush" Value="{StaticResource PrimaryBorderColor}"/>
        <Setter Property="Foreground" Value="{StaticResource PrimaryTextColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="20"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="15"
                        SnapsToDevicePixels="True">
                        <Viewbox Stretch="Uniform">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10" />
                        </Viewbox>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource HighlightBorderColor}"/>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource secundaryBackColor2}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource primaryBackColor2}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="DarkDatePickerStyle" TargetType="DatePicker">
        <Setter Property="Background" Value="{StaticResource PrimaryBackgroundColor}"/>
        <Setter Property="Foreground" Value="{StaticResource PrimaryBackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{StaticResource PrimaryBorderColor}"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Padding" Value="10,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource HighlightBorderColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="DarkLableForm" TargetType="Label">
        <Setter Property="Foreground" Value="{StaticResource PrimaryTextColor}"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="DarkComboBoxRegisterItem" TargetType="ComboBoxItem">
        
    </Style>
        <Style x:Key="DarkComboBoxItemStyle" TargetType="ComboBoxItem">
        <Setter Property="Padding" Value="10,10"/>
        <Setter Property="Margin" Value="0 0 0 0"/>
        <Setter Property="Background" Value="{StaticResource ButtonDisabledBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForeground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBorderColor}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FontFamily" Value="Montserrat"/>

        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <!-- 
                    MEJORA: Se añaden CornerRadius y Margin para una mejor apariencia visual
                    de los items en la lista desplegable.
                -->
                    <Border x:Name="border" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True" CornerRadius="5" Margin="2">
                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- 
                        MEJORA: Se cambia el color del hover a uno más sutil para una mejor UX.
                    -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource ButtonSecondaryHover}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource HighlightBorderColor}"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <Style x:Key="DarkComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource MaterialDesignComboBox}">
        <!-- Estilo principal -->
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryBackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBorderColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Padding" Value="15,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource DarkComboBoxItemStyle}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                        <!-- Popup desplegable -->
                        <Popup x:Name="PART_Popup"
                 Placement="Bottom"
                 AllowsTransparency="True"
                 IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                 PopupAnimation="Slide">
                            <Border x:Name="dropDownBorder"
                    Background="{DynamicResource SecondaryBackgroundColor}"
                    BorderBrush="{DynamicResource HighlightBorderColor}"
                    BorderThickness="1"
                    CornerRadius="10"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    Margin="0,5,0,0">
                                <ScrollViewer>
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>

                        <!-- Borde principal con flecha y placeholder -->
                        <Border x:Name="mainBorder"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  CornerRadius="15">
                            <Grid>
                                <!-- Placeholder si no hay selección -->
                                <TextBlock x:Name="Placeholder"
                         Text="{TemplateBinding Tag}"
                         Foreground="{DynamicResource PlaceholderTextColor}"
                         VerticalAlignment="Center"
                         Margin="{TemplateBinding Padding}"
                         IsHitTestVisible="False"
                         Visibility="Collapsed"/>

                                <!-- Contenido seleccionado -->
                                <ContentPresenter x:Name="ContentSite"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="Center"/>

                                <!-- Flecha -->
                                <Path x:Name="Arrow"
                    Data="M 0 0 L 4 4 L 8 0 Z"
                    Fill="{DynamicResource PrimaryTextColor}"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    Margin="0,0,15,0">
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="0" CenterX="4" CenterY="2"/>
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>
                        </Border>

                        <!-- Captura clic -->
                        <ToggleButton x:Name="ToggleButton"
                        IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                        Focusable="False">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="ToggleButton">
                                    <Border Background="Transparent"/>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                    </Grid>

                    <!-- Triggers -->
                    <ControlTemplate.Triggers>
                        <!-- Hover cambia el borde principal -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource HighlightBorderColor}"/>
                        </Trigger>
                        <!-- Placeholder visible si no hay nada seleccionado -->
                        <Trigger Property="SelectedItem" Value="{x:Null}">
                            <Setter TargetName="Placeholder" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <!-- Disabled baja la opacidad -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <!-- Anima la flecha al desplegar -->
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                   Storyboard.TargetProperty="RenderTransform.Angle"
                                   To="180" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                                   Storyboard.TargetProperty="RenderTransform.Angle"
                                   To="0" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="DarkActionButtonStyle" TargetType="Button"
       BasedOn="{StaticResource MaterialDesignRaisedButton}">
        <!-- Personalización sencilla -->
        <Setter Property="Background" Value="{DynamicResource PrimaryBackgroundColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBorderColor}"/>

        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Cursor" Value="Hand"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                        CornerRadius="15"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ContentPresenter HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Margin="15,0"
                                      RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush"
                                Value="{DynamicResource HighlightBorderColor}"/>
                            <Setter TargetName="border" Property="Background"
                                Value="{DynamicResource PrimaryBackgroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background"
                                Value="{DynamicResource PrimaryBackgroundColor}"/>
                            <Setter TargetName="border" Property="BorderBrush"
                                Value="{DynamicResource FocusBorderColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="#2D3748"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="#2D3748"/>
                            <Setter Property="Foreground" Value="#6A7383"/>
                            <Setter Property="Cursor" Value="Arrow"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="DarkInputControlStyle" TargetType="TextBox"
       BasedOn="{StaticResource MaterialDesignOutlinedTextBox}">
        <!-- Ajustes principales -->
        <Setter Property="Background" Value="#1F2A44"/>
        <Setter Property="Foreground" Value="#E0E6F1"/>
        <Setter Property="BorderBrush" Value="#4D5B7C"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Padding" Value="10,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="materialDesign:HintAssist.HintOpacity" Value="0.5"/>
        <Setter Property="materialDesign:HintAssist.Foreground" Value="#9BA6B7"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="border"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="15"
                SnapsToDevicePixels="True">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost"
                          Focusable="False"
                          HorizontalScrollBarVisibility="Hidden"
                          VerticalScrollBarVisibility="Hidden"
                          Margin="{TemplateBinding Padding}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="#28AEED"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="#28AEED"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Estilo para la barra de búsqueda principal -->
    <Style x:Key="SearchBoxStyle" TargetType="TextBox" BasedOn="{StaticResource MaterialDesignOutlinedTextBox}">

        <Setter Property="Background" Value="{DynamicResource Background.Primary}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Padding" Value="13,0,40,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Text.Secondary}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="15"
                    SnapsToDevicePixels="True">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost"
                                  Margin="{TemplateBinding Padding}"
                                  VerticalAlignment="Center"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden"/>

                            <TextBlock Text="{TemplateBinding Tag}"
                               Foreground="{DynamicResource PlaceholderTextColor}"
                               IsHitTestVisible="False"
                               VerticalAlignment="Center"
                               FontSize="18"
                               Margin="{TemplateBinding Padding}">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value=""/>
                                                    <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger>

                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}"/>
                                                    <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>

                            <fa:IconImage Icon="MagnifyingGlass"
                                  Width="18" Height="18"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Right"
                                  Margin="0,0,15,0"
                                  Foreground="{Binding BorderBrush, ElementName=border}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Brush.Neutral.WhitePure}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Brush.Neutral.WhitePure}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- Estilos Data Grid -->
    <Style x:Key="ElegantDataGridStyle" TargetType="DataGrid"
       BasedOn="{StaticResource MaterialDesignDataGrid}">
        <!-- Ajustes principales -->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="GridLinesVisibility" Value="Horizontal"/>
        <Setter Property="FontFamily" Value="{StaticResource Font.Poppins}"/>
        <Setter Property="HorizontalGridLinesBrush" 
          Value="{DynamicResource MaterialDesignDivider}"/>

        <!-- Encabezados -->
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="ColumnHeaderHeight" Value="40"/>
        <Setter Property="ColumnHeaderStyle" 
          Value="{StaticResource MaterialDesignDataGridColumnHeader}"/>

        <!-- Filas -->
        <Setter Property="RowHeight" Value="45"/>
        <Setter Property="AlternatingRowBackground" 
          Value="{DynamicResource MaterialDesignDivider}"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="SelectionUnit" Value="FullRow"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserSortColumns" Value="False"/>
        <Setter Property="IsReadOnly" Value="True"/>

        <!-- Celdas -->
        <Setter Property="CellStyle" 
          Value="{StaticResource MaterialDesignDataGridCell}"/>
        <Setter Property="RowStyle" 
          Value="{StaticResource MaterialDesignDataGridRow}"/>

    </Style>



    <!-- Estilos contenedor del boton dentro de un control despegable -->
    <Style TargetType="ContextMenu">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border 
                    Background="Transparent"
                    BorderThickness="0"
                    SnapsToDevicePixels="True"
                    CornerRadius="10"
                    Padding="2">
                        <StackPanel 
                        IsItemsHost="True"
                        KeyboardNavigation.DirectionalNavigation="Cycle"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AppMenuItemIconStyle" TargetType="fa:IconImage">
        <!-- Ajuste para evitar recorte -->
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Margin" Value="-2"/>
        <!-- espacio interno horizontal -->
        <Setter Property="VerticalAlignment" Value="Center"/>
        <!-- Enlazar directamente al Foreground del MenuItem -->
        <Setter Property="Foreground"
          Value="{Binding RelativeSource={RelativeSource AncestorType=MenuItem}, Path=Foreground}"/>
    </Style>

    <Style x:Key="AppMenuItemStyle" TargetType="MenuItem" BasedOn="{StaticResource MaterialDesignMenuItem}">
        <Setter Property="MinWidth" Value="160"/>
        <Setter Property="Height" Value="44"/>
        <!-- un poco más alto para mejorar estética -->
        <Setter Property="Padding" Value="12 2 10 2"/>
        <!-- espacio interior uniforme -->
        <Setter Property="Margin" Value="0,2"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontSize" Value="14"/>
        <!-- Permitir modificar Foreground desde el parent -->
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Background.Surface.Hover}"/>
                <Setter Property="BorderBrush" 
              Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}"/>
                <Setter Property="BorderThickness" Value="4,0,0,0"/>
            </Trigger>
        </Style.Triggers>
    </Style>





    <!-- Estilos barra de busquedad -->
    <Style x:Key="textBoxSearch" TargetType="TextBox">
        <Setter Property="Background" Value="#ffffff"/>
        <Setter Property="Foreground" Value="#b0b9c6"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Padding" Value="15 10"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0 10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBoxBase">
                    <Border x:Name="border" CornerRadius="15" 
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True" BorderBrush="#e0e6ed"
                            BorderThickness="1">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False"
                                      HorizontalScrollBarVisibility="Hidden"
                                      VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#d9d9d9" TargetName="border"/>
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" Value="#d9d9d9" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TransparentRepeatButtonStyle" TargetType="RepeatButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Estilos de la barra del Scroll -->
    <Style x:Key="CustomScrollBar" TargetType="ScrollBar">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollBar">
                    <Grid Background="Transparent" Width="{TemplateBinding Width}">
                        <Track Name="PART_Track" IsDirectionReversed="true">
                            <!-- Botón invisible arriba -->
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.LineUpCommand"
                                          Style="{StaticResource TransparentRepeatButtonStyle}"
                                          Height="0" />
                            </Track.DecreaseRepeatButton>
                            <!-- Botón invisible abajo -->
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.LineDownCommand"
                                          Style="{StaticResource TransparentRepeatButtonStyle}"
                                          Height="0" />
                            </Track.IncreaseRepeatButton>
                            <!-- Thumb (la “barrita” que se mueve) -->
                            <Track.Thumb>
                                <!-- Thumb no tiene CornerRadius directo: usamos un template interno -->
                                <Thumb Margin="0">
                                    <Thumb.Template>
                                        <ControlTemplate TargetType="Thumb">
                                            <Border CornerRadius="3"
                                                Background="#888"
                                                SnapsToDevicePixels="True"/>
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="CustomScrollViewer" TargetType="ScrollViewer">
        <!-- Forzamos la barra vertical automática y deshabilitamos la horizontal -->
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <!-- Área de contenido -->
                            <ColumnDefinition/>
                            <!-- Columna para la ScrollBar -->
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <!-- Presentador del contenido desplazable -->
                        <ScrollContentPresenter
                            Grid.Column="0"
                            Content="{TemplateBinding Content}"
                            CanContentScroll="{TemplateBinding CanContentScroll}"
                            Margin="{TemplateBinding Padding}" />

                        <!-- ScrollBar vertical personalizada -->
                        <ScrollBar
                            x:Name="PART_VerticalScrollBar"
                            Grid.Column="1"
                            Orientation="Vertical"
                            Width="6"
                            Margin="0,0,2,0"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Style="{StaticResource CustomScrollBar}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Menu Button -->
    <Style x:Key="menuButton1" TargetType="RadioButton">
        <!-- Normal button style -->
        <Setter Property="Height" Value="50"/>
        <Setter Property="Margin" Value="-5,0,0,5"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource plainTextColor3}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="4,0,0,0"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!-- Button Style on hover -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Height" Value="50"/>
                <Setter Property="Margin" Value="0,0,0,5"/>
                <Setter Property="Background" Value="{StaticResource panelOverColor}"/>
                <Setter Property="Foreground" Value="#C8C8C8"/>
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>

            <!-- Active button style -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Margin" Value="0,0,0,5"/>
                <Setter Property="Background" Value="{StaticResource panelActivateColor}"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Menu button icon -->
    <Style x:Key="menuButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=RadioButton}}"/>
        <Setter Property="Width" Value="22"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="35,0,20,0"/>
    </Style>

    <!-- Menu button text -->
    <Style x:Key="menuButtonText" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=RadioButton}}"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Control bar Button -->
    <Style x:Key="controlButton" TargetType="Button">
        <!-- Normal button style -->
        <Setter Property="Width" Value="35"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource plainTextColor3}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                        CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!-- Button Style on hover -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- Menu button icon -->
    <Style x:Key="controlButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="Height" Value="10"/>
    </Style>

    <!-- Icon Button -->
    <Style x:Key="iconButton" TargetType="Button">
        <!-- Normal button style -->
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="30"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource plainTextColor1}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!-- Button Style on hover -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Menu button icon -->
    <Style x:Key="iconButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
    </Style>


</ResourceDictionary>