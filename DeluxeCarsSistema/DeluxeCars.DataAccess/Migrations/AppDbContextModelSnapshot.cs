// <auto-generated />
using System;
using DeluxeCars.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DeluxeCars.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeluxeCarsEntities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Componentes del sistema de frenado.",
                            Nombre = "Frenos"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Amortiguadores, rótulas y componentes de dirección.",
                            Nombre = "Suspensión y Dirección"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Partes internas y externas del motor.",
                            Nombre = "Motor"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Filtros de aceite, aire, combustible y cabina.",
                            Nombre = "Filtros"
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Baterías, alternadores y sensores.",
                            Nombre = "Sistema Eléctrico"
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "Componentes de la caja de cambios y embrague.",
                            Nombre = "Transmisión"
                        },
                        new
                        {
                            Id = 7,
                            Descripcion = "Neumáticos y rines de varias medidas.",
                            Nombre = "Llantas y Rines"
                        });
                });

            modelBuilder.Entity("DeluxeCarsEntities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TipoCliente")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TipoIdentificacion")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "N/A",
                            Email = "consumidor@final.com",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Identificacion = "999999999",
                            Nombre = "Consumidor Final",
                            Telefono = "N/A",
                            TipoCliente = "Persona Natural",
                            TipoIdentificacion = "N/A"
                        },
                        new
                        {
                            Id = 2,
                            Direccion = "Calle Falsa 123",
                            Email = "compras@tallerrapido.com",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Identificacion = "900123456-7",
                            Nombre = "Taller \"El Rápido\"",
                            Telefono = "3009988776",
                            TipoCliente = "Taller",
                            TipoIdentificacion = "NIT"
                        },
                        new
                        {
                            Id = 3,
                            Direccion = "Avenida Siempre Viva 45",
                            Email = "lucia.f@email.com",
                            Estado = true,
                            FechaCreacion = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Identificacion = "1098765432",
                            Nombre = "Lucía Fernandez",
                            Telefono = "3215554433",
                            TipoCliente = "Persona Natural",
                            TipoIdentificacion = "CC"
                        });
                });

            modelBuilder.Entity("DeluxeCarsEntities.Configuracion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("AdminPINHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("AdminPINSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Banner")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailEmisor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("bit");

                    b.Property<string>("HorarioAtencion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("LockoutEndTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NombreTienda")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("NotificacionesActivas")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordEmailEmisor")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("PinFailedAttempts")
                        .HasColumnType("int");

                    b.Property<decimal>("PorcentajeIVA")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("SmtpHost")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Configuraciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminPINHash = new byte[] { 46, 201, 139, 121, 254, 155, 209, 14, 115, 229, 91, 103, 255, 176, 30, 131, 122, 65, 235, 77, 6, 150, 70, 115, 63, 221, 60, 247, 33, 228, 2, 101, 195, 83, 0, 52, 72, 89, 198, 33, 224, 70, 233, 125, 177, 74, 109, 102, 23, 223, 61, 33, 32, 20, 58, 102, 179, 205, 31, 83, 178, 63, 15, 90 },
                            AdminPINSalt = new byte[] { 200, 83, 160, 16, 78, 248, 207, 38, 92, 77, 89, 102, 153, 114, 81, 115, 83, 30, 186, 233, 102, 213, 73, 2, 96, 217, 113, 195, 170, 196, 242, 251, 129, 207, 218, 130, 213, 87, 159, 92, 195, 57, 218, 61, 141, 228, 57, 69, 141, 252, 79, 232, 234, 248, 158, 153, 105, 6, 107, 229, 59, 2, 96, 151, 68, 31, 241, 195, 1, 90, 56, 145, 138, 20, 210, 114, 191, 199, 75, 61, 21, 160, 101, 184, 223, 64, 29, 126, 194, 161, 64, 192, 154, 154, 89, 83, 176, 121, 121, 121, 206, 132, 229, 52, 47, 239, 88, 93, 102, 226, 96, 15, 61, 150, 137, 82, 38, 54, 163, 54, 136, 220, 154, 111, 209, 217, 250, 29 },
                            Direccion = "La rosita",
                            Email = "deluxecars@gmail.com",
                            EmailEmisor = "",
                            EnableSsl = true,
                            HorarioAtencion = "Lunes a Viernes de 8am a 6pm",
                            NombreTienda = "Deluxe Cars",
                            NotificacionesActivas = false,
                            PinFailedAttempts = 0,
                            PorcentajeIVA = 19.0m,
                            SmtpHost = "",
                            SmtpPort = 587,
                            Telefono = "3001234567"
                        });
                });

            modelBuilder.Entity("DeluxeCarsEntities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Departamentos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Santander"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Antioquia"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Cundinamarca"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Valle del Cauca"
                        });
                });

            modelBuilder.Entity("DeluxeCarsEntities.DetalleFactura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("IVA")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("IdFactura")
                        .HasColumnType("int");

                    b.Property<int>("IdItem")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SubTotalLinea")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TipoDetalle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdFactura");

                    b.ToTable("DetallesFactura");
                });

            modelBuilder.Entity("DeluxeCarsEntities.DetalleNotaDeCredito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdNotaDeCredito")
                        .HasColumnType("int");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("ReingresaAInventario")
                        .HasColumnType("bit");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("IdNotaDeCredito");

                    b.HasIndex("IdProducto");

                    b.ToTable("DetallesNotaDeCredito");
                });

            modelBuilder.Entity("DeluxeCarsEntities.DetallePedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int?>("CantidadRecibida")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("IVA")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<string>("NotaRecepcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdProducto");

                    b.ToTable("DetallesPedidos");
                });

            modelBuilder.Entity("DeluxeCarsEntities.EstadoFacturaElectronica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EstadosFacturaElectronica");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdMetodoPago")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("NumeroFactura")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalIVA")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdMetodoPago");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("NumeroFactura")
                        .IsUnique();

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("DeluxeCarsEntities.FacturaElectronica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CUFE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoFacturaElectronicaId")
                        .HasColumnType("int");

                    b.Property<int>("FacturaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEnvioPT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRecepcionDIAN")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEstadoFacturaElectronica")
                        .HasColumnType("int");

                    b.Property<int>("IdFactura")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoDocumentoElectronico")
                        .HasColumnType("int");

                    b.Property<string>("MensajeRespuestaDIAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MensajeRespuestaPT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservacionesInternas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaRepresentacionGrafica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaXMLFirmado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoDocumentoElectronicoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstadoFacturaElectronicaId");

                    b.HasIndex("FacturaId");

                    b.HasIndex("TipoDocumentoElectronicoId");

                    b.ToTable("FacturasElectronicas");
                });

            modelBuilder.Entity("DeluxeCarsEntities.MetodoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AplicaParaCompras")
                        .HasColumnType("bit");

                    b.Property<bool>("AplicaParaVentas")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<decimal?>("ComisionPorcentaje")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiereReferencia")
                        .HasColumnType("bit");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MetodosPago");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AplicaParaCompras = true,
                            AplicaParaVentas = true,
                            Codigo = "EFE",
                            Descripcion = "Efectivo",
                            Disponible = true,
                            RequiereReferencia = false,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 2,
                            AplicaParaCompras = false,
                            AplicaParaVentas = true,
                            Codigo = "TDC",
                            Descripcion = "Tarjeta de Crédito",
                            Disponible = true,
                            RequiereReferencia = false,
                            Tipo = 2
                        });
                });

            modelBuilder.Entity("DeluxeCarsEntities.MovimientoInventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal>("CostoUnitario")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int?>("IdReferencia")
                        .HasColumnType("int");

                    b.Property<string>("MotivoAjuste")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoMovimiento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdProducto");

                    b.ToTable("MovimientosInventario");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Municipio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int>("IdDepartamento")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartamento");

                    b.ToTable("Municipios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Estado = true,
                            IdDepartamento = 1,
                            Nombre = "Bucaramanga"
                        },
                        new
                        {
                            Id = 2,
                            Estado = true,
                            IdDepartamento = 1,
                            Nombre = "Floridablanca"
                        },
                        new
                        {
                            Id = 3,
                            Estado = true,
                            IdDepartamento = 1,
                            Nombre = "Girón"
                        },
                        new
                        {
                            Id = 4,
                            Estado = true,
                            IdDepartamento = 1,
                            Nombre = "Piedecuesta"
                        },
                        new
                        {
                            Id = 5,
                            Estado = true,
                            IdDepartamento = 1,
                            Nombre = "San Gil"
                        },
                        new
                        {
                            Id = 6,
                            Estado = true,
                            IdDepartamento = 1,
                            Nombre = "Barichara"
                        },
                        new
                        {
                            Id = 7,
                            Estado = true,
                            IdDepartamento = 2,
                            Nombre = "Medellín"
                        },
                        new
                        {
                            Id = 8,
                            Estado = true,
                            IdDepartamento = 2,
                            Nombre = "Itagüí"
                        },
                        new
                        {
                            Id = 9,
                            Estado = true,
                            IdDepartamento = 2,
                            Nombre = "Envigado"
                        },
                        new
                        {
                            Id = 10,
                            Estado = true,
                            IdDepartamento = 2,
                            Nombre = "Bello"
                        },
                        new
                        {
                            Id = 11,
                            Estado = true,
                            IdDepartamento = 2,
                            Nombre = "Rionegro"
                        },
                        new
                        {
                            Id = 12,
                            Estado = true,
                            IdDepartamento = 3,
                            Nombre = "Bogotá D.C."
                        },
                        new
                        {
                            Id = 13,
                            Estado = true,
                            IdDepartamento = 3,
                            Nombre = "Soacha"
                        },
                        new
                        {
                            Id = 14,
                            Estado = true,
                            IdDepartamento = 3,
                            Nombre = "Chía"
                        },
                        new
                        {
                            Id = 15,
                            Estado = true,
                            IdDepartamento = 3,
                            Nombre = "Funza"
                        },
                        new
                        {
                            Id = 16,
                            Estado = true,
                            IdDepartamento = 4,
                            Nombre = "Cali"
                        },
                        new
                        {
                            Id = 17,
                            Estado = true,
                            IdDepartamento = 4,
                            Nombre = "Yumbo"
                        },
                        new
                        {
                            Id = 18,
                            Estado = true,
                            IdDepartamento = 4,
                            Nombre = "Palmira"
                        },
                        new
                        {
                            Id = 19,
                            Estado = true,
                            IdDepartamento = 4,
                            Nombre = "Buenaventura"
                        });
                });

            modelBuilder.Entity("DeluxeCarsEntities.NotaDeCredito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdFacturaOriginal")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<decimal>("MontoTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroNota")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdFacturaOriginal");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("NumeroNota")
                        .IsUnique();

                    b.ToTable("NotasDeCredito");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DataCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<bool>("Leida")
                        .HasColumnType("bit");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PedidoId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("PedidoId");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Orden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DireccionEnvio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaOrden")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalOrden")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("Ordenes");
                });

            modelBuilder.Entity("DeluxeCarsEntities.OrdenDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("OrdenId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrdenId");

                    b.HasIndex("ProductoId");

                    b.ToTable("OrdenDetalles");
                });

            modelBuilder.Entity("DeluxeCarsEntities.PagoCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdMetodoPago")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<decimal>("MontoRecibido")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Referencia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdMetodoPago");

                    b.HasIndex("IdUsuario");

                    b.ToTable("PagosClientes");
                });

            modelBuilder.Entity("DeluxeCarsEntities.PagoClienteFactura", b =>
                {
                    b.Property<int>("IdPagoCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdFactura")
                        .HasColumnType("int");

                    b.HasKey("IdPagoCliente", "IdFactura");

                    b.HasIndex("IdFactura");

                    b.ToTable("PagoClienteFacturas");
                });

            modelBuilder.Entity("DeluxeCarsEntities.PagoProveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdMetodoPago")
                        .HasColumnType("int");

                    b.Property<int>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<decimal>("MontoPagado")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Referencia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdMetodoPago");

                    b.HasIndex("IdProveedor");

                    b.HasIndex("IdUsuario");

                    b.ToTable("PagosProveedores");
                });

            modelBuilder.Entity("DeluxeCarsEntities.PagoProveedorPedido", b =>
                {
                    b.Property<int>("IdPagoProveedor")
                        .HasColumnType("int");

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.HasKey("IdPagoProveedor", "IdPedido");

                    b.HasIndex("IdPedido");

                    b.ToTable("PagoProveedorPedidos");
                });

            modelBuilder.Entity("DeluxeCarsEntities.PasswordReset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("Usado")
                        .HasColumnType("bit");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEstimadaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRecepcionReal")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdMetodoPago")
                        .HasColumnType("int");

                    b.Property<int>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("NumeroPedido")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdMetodoPago");

                    b.HasIndex("IdProveedor");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("NumeroPedido")
                        .IsUnique();

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<string>("ImagenUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("OriginalEquipamentManufacture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("StockMaximo")
                        .HasColumnType("int");

                    b.Property<int?>("StockMinimo")
                        .HasColumnType("int");

                    b.Property<decimal?>("UltimoPrecioCompra")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("UnidadMedida")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            Descripcion = "Disco de freno delantero para Chevrolet Captiva, Hyundai Tucson.",
                            Estado = true,
                            IdCategoria = 1,
                            Nombre = "Disco de Freno Ventilado",
                            OriginalEquipamentManufacture = "DK-455A",
                            Precio = 220000m,
                            StockMinimo = 8,
                            UltimoPrecioCompra = 150000m,
                            UnidadMedida = "Unidad"
                        },
                        new
                        {
                            Id = 7,
                            Descripcion = "Rótula inferior para Toyota Hilux y Fortuner.",
                            Estado = true,
                            IdCategoria = 2,
                            Nombre = "Rótula de Suspensión",
                            OriginalEquipamentManufacture = "ROT-221B",
                            Precio = 75000m,
                            StockMinimo = 15,
                            UltimoPrecioCompra = 45000m,
                            UnidadMedida = "Unidad"
                        },
                        new
                        {
                            Id = 8,
                            Descripcion = "Bujía de alto rendimiento NGK para una mejor combustión.",
                            Estado = true,
                            IdCategoria = 3,
                            Nombre = "Bujía de Iridio",
                            OriginalEquipamentManufacture = "IR-7700",
                            Precio = 45000m,
                            StockMinimo = 20,
                            UltimoPrecioCompra = 25000m,
                            UnidadMedida = "Unidad"
                        },
                        new
                        {
                            Id = 9,
                            Descripcion = "Batería sellada MAC Gold Plus, libre de mantenimiento.",
                            Estado = true,
                            IdCategoria = 5,
                            Nombre = "Batería 12V 850A",
                            OriginalEquipamentManufacture = "BAT-12850",
                            Precio = 550000m,
                            StockMinimo = 5,
                            UltimoPrecioCompra = 390000m,
                            UnidadMedida = "Unidad"
                        },
                        new
                        {
                            Id = 10,
                            Descripcion = "Kit de clutch completo LUK para Chevrolet Spark GT.",
                            Estado = true,
                            IdCategoria = 6,
                            Nombre = "Kit de Embrague",
                            OriginalEquipamentManufacture = "ACK-2105",
                            Precio = 750000m,
                            StockMinimo = 4,
                            UltimoPrecioCompra = 550000m,
                            UnidadMedida = "Kit"
                        },
                        new
                        {
                            Id = 11,
                            Descripcion = "Filtro de gasolina para Chevrolet Sail, Onix.",
                            Estado = true,
                            IdCategoria = 4,
                            Nombre = "Filtro de Combustible",
                            OriginalEquipamentManufacture = "FC-5501",
                            Precio = 65000m,
                            StockMinimo = 20,
                            UltimoPrecioCompra = 38000m,
                            UnidadMedida = "Unidad"
                        },
                        new
                        {
                            Id = 12,
                            Descripcion = "Terminal axial para Kia Rio, Hyundai Accent.",
                            Estado = true,
                            IdCategoria = 2,
                            Nombre = "Terminal de Dirección",
                            OriginalEquipamentManufacture = "TR-3320",
                            Precio = 95000m,
                            StockMinimo = 10,
                            UltimoPrecioCompra = 55000m,
                            UnidadMedida = "Unidad"
                        },
                        new
                        {
                            Id = 13,
                            Descripcion = "Alternador genérico de alta capacidad para varios modelos.",
                            Estado = true,
                            IdCategoria = 5,
                            Nombre = "Alternador 12V 90A",
                            OriginalEquipamentManufacture = "ALT-9001",
                            Precio = 850000m,
                            StockMinimo = 3,
                            UltimoPrecioCompra = 600000m,
                            UnidadMedida = "Unidad"
                        },
                        new
                        {
                            Id = 14,
                            Descripcion = "Bomba de agua con empaque para Ford Fiesta y Ecosport.",
                            Estado = true,
                            IdCategoria = 3,
                            Nombre = "Bomba de Agua",
                            OriginalEquipamentManufacture = "BMA-205B",
                            Precio = 280000m,
                            StockMinimo = 5,
                            UltimoPrecioCompra = 180000m,
                            UnidadMedida = "Unidad"
                        },
                        new
                        {
                            Id = 15,
                            Descripcion = "Botella de 500ml de líquido de frenos sintético.",
                            Estado = true,
                            IdCategoria = 1,
                            Nombre = "Líquido de Frenos DOT 4",
                            OriginalEquipamentManufacture = "LF-DOT4-500",
                            Precio = 38000m,
                            StockMinimo = 30,
                            UltimoPrecioCompra = 22000m,
                            UnidadMedida = "Botella"
                        },
                        new
                        {
                            Id = 16,
                            Descripcion = "Aceite sintético para caja de cambios manual.",
                            Estado = true,
                            IdCategoria = 6,
                            Nombre = "Aceite para Transmisión 75W-90",
                            OriginalEquipamentManufacture = "OIL-75W90",
                            Precio = 90000m,
                            StockMinimo = 12,
                            UltimoPrecioCompra = 65000m,
                            UnidadMedida = "Litro"
                        },
                        new
                        {
                            Id = 17,
                            Descripcion = "Filtro de aire para cabina con carbón activado anti-olores.",
                            Estado = true,
                            IdCategoria = 4,
                            Nombre = "Filtro de Cabina Carbón Activado",
                            OriginalEquipamentManufacture = "FC-C220",
                            Precio = 55000m,
                            StockMinimo = 15,
                            UltimoPrecioCompra = 30000m,
                            UnidadMedida = "Unidad"
                        },
                        new
                        {
                            Id = 18,
                            Descripcion = "Bieleta o 'lápiz' de barra estabilizadora para Mazda 2.",
                            Estado = true,
                            IdCategoria = 2,
                            Nombre = "Bieleta de Suspensión Delantera",
                            OriginalEquipamentManufacture = "BIE-1090",
                            Precio = 60000m,
                            StockMinimo = 20,
                            UltimoPrecioCompra = 35000m,
                            UnidadMedida = "Unidad"
                        },
                        new
                        {
                            Id = 19,
                            Descripcion = "Empaque de culata multilámina para Renault Logan/Sandero 1.6L 8V.",
                            Estado = true,
                            IdCategoria = 3,
                            Nombre = "Empaque de Culata",
                            OriginalEquipamentManufacture = "EMP-C16",
                            Precio = 120000m,
                            StockMinimo = 5,
                            UltimoPrecioCompra = 75000m,
                            UnidadMedida = "Unidad"
                        },
                        new
                        {
                            Id = 20,
                            Descripcion = "Sensor de oxígeno de 4 pines, conector universal.",
                            Estado = true,
                            IdCategoria = 5,
                            Nombre = "Sensor de Oxígeno (Sonda Lambda)",
                            OriginalEquipamentManufacture = "O2S-4P",
                            Precio = 250000m,
                            StockMinimo = 8,
                            UltimoPrecioCompra = 160000m,
                            UnidadMedida = "Unidad"
                        },
                        new
                        {
                            Id = 21,
                            Descripcion = "Bomba de freno principal para Nissan March / Versa.",
                            Estado = true,
                            IdCategoria = 1,
                            Nombre = "Cilindro Maestro de Freno",
                            OriginalEquipamentManufacture = "CMF-88A",
                            Precio = 310000m,
                            StockMinimo = 4,
                            UltimoPrecioCompra = 220000m,
                            UnidadMedida = "Unidad"
                        },
                        new
                        {
                            Id = 22,
                            Descripcion = "Anillos sincronizadores para caja de Renault Twingo.",
                            Estado = true,
                            IdCategoria = 6,
                            Nombre = "Sincronizador de 3ra y 4ta",
                            OriginalEquipamentManufacture = "SYNC-34-RN",
                            Precio = 380000m,
                            StockMinimo = 3,
                            UltimoPrecioCompra = 250000m,
                            UnidadMedida = "Juego"
                        });
                });

            modelBuilder.Entity("DeluxeCarsEntities.ProductoProveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioCompra")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TipoSuministro")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdProveedor", "IdProducto")
                        .IsUnique();

                    b.ToTable("ProductoProveedor", (string)null);
                });

            modelBuilder.Entity("DeluxeCarsEntities.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int>("IdMunicipio")
                        .HasColumnType("int");

                    b.Property<string>("NIT")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdMunicipio");

                    b.HasIndex("NIT")
                        .IsUnique();

                    b.ToTable("Proveedores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "compras@elfrenazo.com",
                            Estado = true,
                            IdMunicipio = 7,
                            NIT = "900.123.456-7",
                            RazonSocial = "AutoPartes El Frenazo S.A.S.",
                            Telefono = "3101234567"
                        },
                        new
                        {
                            Id = 2,
                            Email = "contacto@ruedalibre.co",
                            Estado = true,
                            IdMunicipio = 12,
                            NIT = "830.987.654-1",
                            RazonSocial = "Importaciones Rueda Libre Ltda.",
                            Telefono = "3159876543"
                        },
                        new
                        {
                            Id = 3,
                            Email = "proveedor@pistonveloz.com",
                            Estado = true,
                            IdMunicipio = 16,
                            NIT = "789.456.123-2",
                            RazonSocial = "Distribuciones El Pistón Veloz",
                            Telefono = "3005551212"
                        });
                });

            modelBuilder.Entity("DeluxeCarsEntities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Acceso total al sistema.",
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Acceso limitado a ventas y operaciones diarias.",
                            Nombre = "Empleado"
                        });
                });

            modelBuilder.Entity("DeluxeCarsEntities.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DuracionEstimada")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int>("IdTipoServicio")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TipoServicioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoServicioId");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("DeluxeCarsEntities.SiteContent", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("SiteContents");
                });

            modelBuilder.Entity("DeluxeCarsEntities.TipoDocumentoElectronico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoDIAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreTipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposDocumentoElectronico");
                });

            modelBuilder.Entity("DeluxeCarsEntities.TipoServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposServicios");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varbinary(128)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdRol");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DeluxeCarsEntities.DetalleFactura", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Factura", "Factura")
                        .WithMany("DetallesFactura")
                        .HasForeignKey("IdFactura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factura");
                });

            modelBuilder.Entity("DeluxeCarsEntities.DetalleNotaDeCredito", b =>
                {
                    b.HasOne("DeluxeCarsEntities.NotaDeCredito", "NotaDeCredito")
                        .WithMany("Detalles")
                        .HasForeignKey("IdNotaDeCredito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Producto", "Producto")
                        .WithMany("DetallesNotaDeCredito")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NotaDeCredito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("DeluxeCarsEntities.DetallePedido", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Pedido", "Pedido")
                        .WithMany("DetallesPedidos")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Producto", "Producto")
                        .WithMany("DetallesPedidos")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Factura", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Cliente", "Cliente")
                        .WithMany("Facturas")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.MetodoPago", "MetodoPago")
                        .WithMany("Facturas")
                        .HasForeignKey("IdMetodoPago")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Usuario", "Usuario")
                        .WithMany("Facturas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Cliente");

                    b.Navigation("MetodoPago");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DeluxeCarsEntities.FacturaElectronica", b =>
                {
                    b.HasOne("DeluxeCarsEntities.EstadoFacturaElectronica", "EstadoFacturaElectronica")
                        .WithMany("FacturasElectronicas")
                        .HasForeignKey("EstadoFacturaElectronicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Factura", "Factura")
                        .WithMany()
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.TipoDocumentoElectronico", "TipoDocumentoElectronico")
                        .WithMany("FacturasElectronicas")
                        .HasForeignKey("TipoDocumentoElectronicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoFacturaElectronica");

                    b.Navigation("Factura");

                    b.Navigation("TipoDocumentoElectronico");
                });

            modelBuilder.Entity("DeluxeCarsEntities.MovimientoInventario", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Municipio", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Departamento", "Departamento")
                        .WithMany("Municipios")
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("DeluxeCarsEntities.NotaDeCredito", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Factura", "FacturaOriginal")
                        .WithMany("NotasDeCredito")
                        .HasForeignKey("IdFacturaOriginal")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("FacturaOriginal");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Notificacion", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId");

                    b.Navigation("Pedido");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DeluxeCarsEntities.OrdenDetalle", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Orden", "Orden")
                        .WithMany("OrdenDetalles")
                        .HasForeignKey("OrdenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orden");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("DeluxeCarsEntities.PagoCliente", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.MetodoPago", "MetodoPago")
                        .WithMany()
                        .HasForeignKey("IdMetodoPago")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("MetodoPago");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DeluxeCarsEntities.PagoClienteFactura", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Factura", "Factura")
                        .WithMany("PagosRecibidos")
                        .HasForeignKey("IdFactura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.PagoCliente", "PagoCliente")
                        .WithMany("FacturasCubiertas")
                        .HasForeignKey("IdPagoCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factura");

                    b.Navigation("PagoCliente");
                });

            modelBuilder.Entity("DeluxeCarsEntities.PagoProveedor", b =>
                {
                    b.HasOne("DeluxeCarsEntities.MetodoPago", "MetodoPago")
                        .WithMany()
                        .HasForeignKey("IdMetodoPago")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MetodoPago");

                    b.Navigation("Proveedor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DeluxeCarsEntities.PagoProveedorPedido", b =>
                {
                    b.HasOne("DeluxeCarsEntities.PagoProveedor", "PagoProveedor")
                        .WithMany("PedidosCubiertos")
                        .HasForeignKey("IdPagoProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Pedido", "Pedido")
                        .WithMany("PagosAplicados")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PagoProveedor");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("DeluxeCarsEntities.PasswordReset", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Usuario", "Usuario")
                        .WithMany("PasswordResets")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Pedido", b =>
                {
                    b.HasOne("DeluxeCarsEntities.MetodoPago", "MetodoPago")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdMetodoPago")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Proveedor", "Proveedor")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Usuario", "Usuario")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MetodoPago");

                    b.Navigation("Proveedor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Producto", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("DeluxeCarsEntities.ProductoProveedor", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Producto", "Producto")
                        .WithMany("ProductoProveedores")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeluxeCarsEntities.Proveedor", "Proveedor")
                        .WithMany("ProductoProveedores")
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Proveedor", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Municipio", "Municipio")
                        .WithMany("Proveedores")
                        .HasForeignKey("IdMunicipio")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Servicio", b =>
                {
                    b.HasOne("DeluxeCarsEntities.TipoServicio", "TipoServicio")
                        .WithMany("Servicios")
                        .HasForeignKey("TipoServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoServicio");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Usuario", b =>
                {
                    b.HasOne("DeluxeCarsEntities.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeluxeCarsEntities.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Cliente", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Departamento", b =>
                {
                    b.Navigation("Municipios");
                });

            modelBuilder.Entity("DeluxeCarsEntities.EstadoFacturaElectronica", b =>
                {
                    b.Navigation("FacturasElectronicas");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Factura", b =>
                {
                    b.Navigation("DetallesFactura");

                    b.Navigation("NotasDeCredito");

                    b.Navigation("PagosRecibidos");
                });

            modelBuilder.Entity("DeluxeCarsEntities.MetodoPago", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Municipio", b =>
                {
                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("DeluxeCarsEntities.NotaDeCredito", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Orden", b =>
                {
                    b.Navigation("OrdenDetalles");
                });

            modelBuilder.Entity("DeluxeCarsEntities.PagoCliente", b =>
                {
                    b.Navigation("FacturasCubiertas");
                });

            modelBuilder.Entity("DeluxeCarsEntities.PagoProveedor", b =>
                {
                    b.Navigation("PedidosCubiertos");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Pedido", b =>
                {
                    b.Navigation("DetallesPedidos");

                    b.Navigation("PagosAplicados");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Producto", b =>
                {
                    b.Navigation("DetallesNotaDeCredito");

                    b.Navigation("DetallesPedidos");

                    b.Navigation("ProductoProveedores");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Proveedor", b =>
                {
                    b.Navigation("Pedidos");

                    b.Navigation("ProductoProveedores");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("DeluxeCarsEntities.TipoDocumentoElectronico", b =>
                {
                    b.Navigation("FacturasElectronicas");
                });

            modelBuilder.Entity("DeluxeCarsEntities.TipoServicio", b =>
                {
                    b.Navigation("Servicios");
                });

            modelBuilder.Entity("DeluxeCarsEntities.Usuario", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("PasswordResets");

                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
