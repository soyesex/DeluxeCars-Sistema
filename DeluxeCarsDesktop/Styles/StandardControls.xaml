<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:fa="clr-namespace:FontAwesome.Sharp;assembly=FontAwesome.Sharp"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <Style x:Key="CustomDarkDatePickerStyle" TargetType="DatePicker" BasedOn="{StaticResource MaterialDesignOutlinedDatePicker}">
        <Setter Property="Background" Value="#FFFFFF"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="BorderBrush" Value="#4A5A72"/>
        <Setter Property="Height" Value="45"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.Poppins}"/>
        <Setter Property="materialDesign:HintAssist.Hint" Value="Fecha Inicio"/>
        <Setter Property="materialDesign:HintAssist.Foreground" Value="#8A9EB5"/>
        <Setter Property="materialDesign:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ContextMenuIconItemStyle" TargetType="MenuItem">
        <Setter Property="Padding" Value="10,8"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.Poppins}"/>
        <Setter Property="Background" Value="{DynamicResource Brush.Brand.NavyDark}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Icon">
            <Setter.Value>
                <fa:IconImage Icon="{Binding Tag, RelativeSource={RelativeSource Self}}"
                          Width="20" Height="20" Margin="0,0,10,0"
                          Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType=MenuItem}}"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CarouselButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="40"/>
        <Setter Property="Background" Value="#30FFFFFF"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" CornerRadius="20">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#50FFFFFF"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CarouselIconStyle" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="20"/>
    </Style>


    <Style x:Key="ElegantComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource MaterialDesignOutlinedComboBox}">

        <Setter Property="FontFamily" Value="{DynamicResource Font.Poppins}"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.Neutral.WhiteMuted}"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="MinHeight" Value="42"/>
        <Setter Property="MinWidth" Value="130"/>
        <Setter Property="Padding" Value="12,0,10,0"/>
        <Setter Property="Background" Value="{DynamicResource  Background.Surface}"/>
        <Setter Property="BorderBrush" Value="DarkGray"/>
        <Setter Property="BorderThickness" Value="0,0,0,0"/>
        <Setter Property="materialDesign:TextFieldAssist.UnderlineCornerRadius" Value="20" />

        <Setter Property="materialDesign:TextFieldAssist.UnderlineBrush" Value="{StaticResource Background.Surface.Selected}" />
        <Style.Triggers>
            <!-- Button Style on hover -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Brush.Brand.GraySteel}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Brand.NavyDark}"/>
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ElegantTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource MaterialDesignOutlinedTextBox}">
        <!-- Propiedades visuales adaptadas del ComboBox -->
        <Setter Property="FontFamily" Value="{DynamicResource Font.Poppins}"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.Neutral.WhiteMuted}"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Height" Value="45"/>
        <Setter Property="MinWidth" Value="130"/>
        <Setter Property="Padding" Value="10 10"/>

        <!-- Se usa la propiedad de Material Design para las esquinas del borde -->
        <Setter Property="materialDesign:TextFieldAssist.TextFieldCornerRadius" Value="5" />

        <!-- El fondo y el borde se establecen aquí para el estado normal -->
        <Setter Property="Background" Value="{DynamicResource Background.Surface}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>

        <!-- El Trigger de IsMouseOver se adapta para el TextBox -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Brush.Brand.CharcoalLight}"/>
                <Setter Property="Foreground" Value="{DynamicResource Brush.Neutral.WhiteMuted}"/>
                <!-- El BorderBrush cambiará al color definido en la propiedad Tag del TextBox -->
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="StandardFormTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource MaterialDesignFloatingHintTextBox}">
        <Setter Property="materialDesign:HintAssist.FloatingScale" Value="1.0"/>
        <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="True"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="CaretBrush" Value="LightGray"/>
        <Setter Property="BorderBrush" Value="DarkGray"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,10,0,10"/>
    </Style>

    <Style x:Key="StandardFormMultiLineTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource StandardFormTextBoxStyle}">
        <Setter Property="Height" Value="NaN"/>
        <Setter Property="MinHeight" Value="120"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Padding" Value="0,0,0,5"/>
    </Style>

    <Style TargetType="ToolTip">
        <Setter Property="Background" Value="{StaticResource Background.Surface}"/>
        <Setter Property="Foreground" Value="{StaticResource Text.Primary}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource Border.Default}"/>
        <Setter Property="Padding" Value="8,5"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.Poppins}"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <Style x:Key="AppComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource MaterialDesignComboBox}">
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="Foreground" Value="{DynamicResource Text.Secondary}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Background.Disabled}"/>
        <Setter Property="materialDesign:TextFieldAssist.UnderlineBrush"
            Value="{DynamicResource Brush.Menu.BlueCornflower}"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource AppComboBoxItemStyle}"/>
    </Style>


    <!-- Estilos super importantes -->
    <!-- Menu Button -->
    <Style x:Key="menuButton1" TargetType="RadioButton">
        <!-- Normal button style -->
        <Setter Property="Height" Value="50"/>
        <Setter Property="Margin" Value="-5,0,0,5"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource plainTextColor3}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Border Background="{TemplateBinding Background}"
                        BorderThickness="4,0,0,0"
                        BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!-- Button Style on hover -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Height" Value="50"/>
                <Setter Property="Margin" Value="0,0,0,5"/>
                <Setter Property="Background" Value="{DynamicResource panelOverColor}"/>
                <Setter Property="Foreground" Value="#C8C8C8"/>
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>

            <!-- Active button style -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Margin" Value="0,0,0,5"/>
                <Setter Property="Background" Value="{DynamicResource panelActivateColor}"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Menu button icon -->
    <Style x:Key="menuButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=RadioButton}}"/>
        <Setter Property="Width" Value="22"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="35,0,20,0"/>
    </Style>

    <!-- Menu button text -->
    <Style x:Key="menuButtonText" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=RadioButton}}"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Control bar Button -->
    <Style x:Key="controlButton" TargetType="Button">
        <!-- Normal button style -->
        <Setter Property="Width" Value="35"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource plainTextColor3}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                    CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!-- Button Style on hover -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- Menu button icon -->
    <Style x:Key="controlButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="Height" Value="10"/>
    </Style>

    <!-- Icon Button -->
    <Style x:Key="iconButton" TargetType="Button">
        <!-- Normal button style -->
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="30"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource plainTextColor1}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!-- Button Style on hover -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Menu button icon -->
    <Style x:Key="iconButtonIcon" TargetType="fa:IconImage">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
    </Style>


    <!-- LOS VAMOS A ELIMINAR -->

    <Style x:Key="AppMenuItemStyle" TargetType="MenuItem" BasedOn="{StaticResource MaterialDesignMenuItem}">
        <Setter Property="MinWidth" Value="160"/>
        <Setter Property="Height" Value="44"/>
        <!-- un poco más alto para mejorar estética -->
        <Setter Property="Padding" Value="12 2 10 2"/>
        <!-- espacio interior uniforme -->
        <Setter Property="Margin" Value="0,2"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontSize" Value="14"/>
        <!-- Permitir modificar Foreground desde el parent -->
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Background.Surface.Hover}"/>
                <Setter Property="BorderBrush" 
           Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}"/>
                <Setter Property="BorderThickness" Value="4,0,0,0"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="textBoxSearch" TargetType="TextBox">
        <Setter Property="Background" Value="#ffffff"/>
        <Setter Property="Foreground" Value="#b0b9c6"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Padding" Value="15 10"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0 10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBoxBase">
                    <Border x:Name="border" CornerRadius="15" 
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True" BorderBrush="#e0e6ed"
                        BorderThickness="1">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#d9d9d9" TargetName="border"/>
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" Value="#d9d9d9" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="DarkComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource MaterialDesignComboBox}">
        <!-- Estilo principal -->
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryBackgroundColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBorderColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Padding" Value="15,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource DarkComboBoxItemStyle}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                        <!-- Popup desplegable -->
                        <Popup x:Name="PART_Popup"
             Placement="Bottom"
             AllowsTransparency="True"
             IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
             PopupAnimation="Slide">
                            <Border x:Name="dropDownBorder"
                Background="{DynamicResource SecondaryBackgroundColor}"
                BorderBrush="{DynamicResource HighlightBorderColor}"
                BorderThickness="1"
                CornerRadius="10"
                MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                Margin="0,5,0,0">
                                <ScrollViewer>
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>

                        <!-- Borde principal con flecha y placeholder -->
                        <Border x:Name="mainBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              CornerRadius="15">
                            <Grid>
                                <!-- Placeholder si no hay selección -->
                                <TextBlock x:Name="Placeholder"
                     Text="{TemplateBinding Tag}"
                     Foreground="{DynamicResource PlaceholderTextColor}"
                     VerticalAlignment="Center"
                     Margin="{TemplateBinding Padding}"
                     IsHitTestVisible="False"
                     Visibility="Collapsed"/>

                                <!-- Contenido seleccionado -->
                                <ContentPresenter x:Name="ContentSite"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="Center"/>

                                <!-- Flecha -->
                                <Path x:Name="Arrow"
                Data="M 0 0 L 4 4 L 8 0 Z"
                Fill="{DynamicResource PrimaryTextColor}"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                Margin="0,0,15,0">
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="0" CenterX="4" CenterY="2"/>
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>
                        </Border>

                        <!-- Captura clic -->
                        <ToggleButton x:Name="ToggleButton"
                    IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    Focusable="False">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="ToggleButton">
                                    <Border Background="Transparent"/>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                    </Grid>

                    <!-- Triggers -->
                    <ControlTemplate.Triggers>
                        <!-- Hover cambia el borde principal -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource HighlightBorderColor}"/>
                        </Trigger>
                        <!-- Placeholder visible si no hay nada seleccionado -->
                        <Trigger Property="SelectedItem" Value="{x:Null}">
                            <Setter TargetName="Placeholder" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <!-- Disabled baja la opacidad -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <!-- Anima la flecha al desplegar -->
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                               Storyboard.TargetProperty="RenderTransform.Angle"
                               To="180" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Arrow"
                               Storyboard.TargetProperty="RenderTransform.Angle"
                               To="0" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    

    <Style x:Key="DarkActionButtonStyle" TargetType="Button"
           BasedOn="{StaticResource MaterialDesignRaisedButton}">
        <!-- Personalización sencilla -->
        <Setter Property="Background" Value="{DynamicResource PrimaryBackgroundColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBorderColor}"/>

        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Cursor" Value="Hand"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                    CornerRadius="15"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    SnapsToDevicePixels="True">
                        <ContentPresenter HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Margin="15,0"
                                  RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush"
                            Value="{DynamicResource HighlightBorderColor}"/>
                            <Setter TargetName="border" Property="Background"
                            Value="{DynamicResource PrimaryBackgroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background"
                            Value="{DynamicResource PrimaryBackgroundColor}"/>
                            <Setter TargetName="border" Property="BorderBrush"
                            Value="{DynamicResource FocusBorderColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="#2D3748"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="#2D3748"/>
                            <Setter Property="Foreground" Value="#6A7383"/>
                            <Setter Property="Cursor" Value="Arrow"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CardButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource secundaryBackColor1}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBorderColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="20"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="15"
                    SnapsToDevicePixels="True">
                        <Viewbox Stretch="Uniform">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10" />
                        </Viewbox>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource HighlightBorderColor}"/>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource secundaryBackColor2}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource primaryBackColor2}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Botones -->
    <Style x:Key="PrimaryActionButtonStyle"
   TargetType="Button"
   BasedOn="{StaticResource MaterialDesignRaisedButton}">
        <Setter Property="Background" Value="{DynamicResource Brush.Aggressive.DeepBlue}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="materialDesign:ElevationAssist.Elevation" Value="Dp2"/>

        <Setter Property="Template">
            <Setter.Value>
                <!-- Aquí va el ControlTemplate completo -->
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
            Background="{TemplateBinding Background}"
            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#345A9B"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#2D4F88"/>
                            <Setter Property="materialDesign:ElevationAssist.Elevation" Value="Dp4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ElegantShadowGhostButton" TargetType="Button"
   BasedOn="{StaticResource MaterialDesignOutlinedButton}">
        <Setter Property="FontFamily" Value="{DynamicResource Font.Poppins}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="35" />
        <Setter Property="Foreground" Value="{StaticResource Text.Secondary}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="#000000" BlurRadius="8" ShadowDepth="2" Opacity="0.3"/>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect ShadowDepth="0" 
                              BlurRadius="15" 
                              Opacity="0.8"
                              Color="{Binding Path=Tag.Color, RelativeSource={RelativeSource Self}}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect Color="#000000" BlurRadius="10" ShadowDepth="3" Opacity="0.35"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ElegantGhostButtonStyle" TargetType="Button" BasedOn="{StaticResource MaterialDesignOutlinedButton}">
        <Setter Property="Foreground" Value="DarkGray"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0.8"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="17"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>

                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Estilo para botones de acción en formularios oscuros -->
    <Style x:Key="FormActionButtonStyle" TargetType="Button" BasedOn="{StaticResource MaterialDesignRaisedButton}">
        <Setter Property="Width" Value="120"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="20"/>
    </Style>

    <!-- No se que son ni donde van pero son searchbox -->
    <Style x:Key="AppFormFieldStyle" TargetType="TextBox">
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Height" Value="44"/>
        <Setter Property="Margin" Value="0,8"/>
        <Setter Property="Padding" Value="15,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Background" Value="{StaticResource Background.Surface}"/>
        <Setter Property="Foreground" Value="{StaticResource Text.Primary}"/>
        <Setter Property="CaretBrush" Value="{StaticResource Border.Focus}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Border.Default}"/>
        <Setter Property="BorderThickness" Value="1"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="8">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost"
                                  Margin="{TemplateBinding Padding}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                            <TextBlock Text="{TemplateBinding Tag}"
                               Foreground="{StaticResource Text.Secondary}"
                               IsHitTestVisible="False"
                               VerticalAlignment="Center"
                               Margin="{TemplateBinding Padding}">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value=""/>
                                                    <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}"/>
                                                    <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Border.Focus}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Border.Focus}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
<!-- Basado en el de arriba -->
    <Style x:Key="AppFormMultiLineTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource AppFormFieldStyle}">
        <Setter Property="Height" Value="NaN"/>
        <Setter Property="MinHeight" Value="100"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
    </Style>

    <!-- Estilo para botones de acción en formularios oscuros -->
    <Style x:Key="AppFormComboBoxStyle" TargetType="ComboBox">
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Height" Value="44"/>
        <Setter Property="Margin" Value="0,8"/>
        <Setter Property="Padding" Value="15,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Background" Value="{StaticResource Background.Surface}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Border.Default}"/>
        <Setter Property="Foreground" Value="{StaticResource Text.Primary}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border x:Name="border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="1"
                    CornerRadius="8">
                        <Grid>
                            <Path x:Name="arrow" Data="M 0 0 L 4 4 L 8 0 Z" Fill="{TemplateBinding Foreground}"
                          HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,15,0"/>

                            <ContentPresenter x:Name="ContentSite"
                                      Content="{TemplateBinding SelectionBoxItem}"
                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"/>

                            <TextBlock Text="{TemplateBinding Tag}" Foreground="{StaticResource Text.Secondary}"
                               IsHitTestVisible="False" VerticalAlignment="Center" Margin="{TemplateBinding Padding}">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Border.Focus}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Border.Focus}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Estilo para labels basicos -->
    <Style x:Key="DarkLabelForm" TargetType="Label">
        <Setter Property="Foreground" Value="{DynamicResource Brush.Brand.CharcoalDark}"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <!-- Estilo para fechas -->
    <Style x:Key="DarkDatePickerStyle" TargetType="DatePicker"
   BasedOn="{StaticResource MaterialDesignFloatingHintDatePicker}">
        <!-- Personalización general -->
        <Setter Property="Background" Value="{DynamicResource Brush.Neutral.WhitePure}"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.Neutral.WhitePure}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBorderColor}"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.Poppins}"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Padding" Value="0,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

        <!-- Hint flotante -->
        <Setter Property="materialDesign:HintAssist.Hint" Value="{Binding Tag, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="materialDesign:HintAssist.Foreground" Value="{DynamicResource PlaceholderTextColor}"/>
        <Setter Property="materialDesign:HintAssist.HintOpacity" Value="0.6"/>

        <!-- Ajuste del calendario desplegable -->
        <Setter Property="CalendarStyle">
            <Setter.Value>
                <Style TargetType="Calendar" BasedOn="{StaticResource MaterialDesignDatePickerCalendarPortrait}">
                    <Style.Resources>
                        <SolidColorBrush x:Key="PrimaryHueMidBrush" Color="{DynamicResource Color.Brand.GraySteel}"/>
                        <SolidColorBrush x:Key="PrimaryHueDarkBrush" Color="{DynamicResource Color.Accent.DeepSkyBlue}"/>
                    </Style.Resources>
                </Style>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource HighlightBorderColor}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryBackgroundColor}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource HighlightBorderColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    

    <!-- Estilo para la barra de búsqueda principal -->

    <Style x:Key="BaseInputStyle" TargetType="Control">
        <Setter Property="FontFamily" Value="{DynamicResource Font.Poppins}"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="14,0,40,0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Text.Secondary}"/>
    </Style>

    <Style x:Key="SearchBoxStyle" TargetType="TextBox" BasedOn="{StaticResource BaseInputStyle}">
        <Setter Property="Background" Value="{DynamicResource Background.Primary}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="BorderThickness" Value="0"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="15"
                    SnapsToDevicePixels="True">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost"
                                  Margin="{TemplateBinding Padding}"
                                  VerticalAlignment="Center"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden"/>

                            <TextBlock Text="{TemplateBinding Tag}"
                               Foreground="{DynamicResource PlaceholderTextColor}"
                               IsHitTestVisible="False"
                               VerticalAlignment="Center"
                               FontSize="{TemplateBinding FontSize}"
                               FontFamily="{TemplateBinding FontFamily}"
                               FontWeight="{TemplateBinding FontWeight}"
                               Margin="{TemplateBinding Padding}">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value=""/>
                                                    <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger>

                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}"/>
                                                    <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <fa:IconImage x:Name="searchIcon" Icon="MagnifyingGlass"
                              Width="18" Height="18"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Right"
                              Margin="0,0,15,0"
                              Foreground="{Binding BorderBrush, ElementName=border}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="searchIcon" Property="Foreground" Value="{DynamicResource Brush.Neutral.WhitePure}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DarkInputControlStyle" TargetType="TextBox"
            BasedOn="{StaticResource MaterialDesignOutlinedTextBox}">
        <!-- Ajustes principales -->
        <Setter Property="Background" Value="{StaticResource Background.Secondary}"/>
        <Setter Property="Foreground" Value="#E0E6F1"/>
        <Setter Property="BorderBrush" Value="#4D5B7C"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.Poppins}"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Padding" Value="10,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="materialDesign:HintAssist.HintOpacity" Value="0.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="5"
                            SnapsToDevicePixels="True">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost"
                  Focusable="False"
                  HorizontalScrollBarVisibility="Hidden"
                  VerticalScrollBarVisibility="Hidden"
                  Margin="{TemplateBinding Padding}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SecondaryViewInputStyle" TargetType="Control">
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Height" Value="45"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10,0,30,0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Border.Secondary}"/>
    </Style>

    <Style x:Key="SecondarySearchBoxStyle" TargetType="TextBox" BasedOn="{StaticResource SecondaryViewInputStyle}">
        <Setter Property="Background" Value="{DynamicResource Background.Secondary}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.Poppins}"/>
        <Setter Property="Foreground" Value="{DynamicResource Text.Secondary}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource Text.Secondary}"/>
        <Setter Property="materialDesign:HintAssist.HintOpacity" Value="0.5"/>
        <Setter Property="materialDesign:HintAssist.Foreground" Value="#9BA6B7"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5">

                        <ScrollViewer x:Name="PART_ContentHost"
                                  Focusable="false"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Brush.Brand.GraySteel}"/>

                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Estilos combobox-->
    <Style x:Key="FilteringComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource SecondaryViewInputStyle}">
        <Setter Property="Background" Value="{DynamicResource Background.Secondary}"/>
        <Setter Property="Foreground" Value="{DynamicResource Text.Secondary}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="IsEditable" Value="False"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource SecondaryComboBoxItemStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton x:Name="PART_DropDownToggle"
                              IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                              Focusable="False"
                              Style="{StaticResource {x:Type ToggleButton}}"/>

                        <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="8">
                            <Grid>
                                <TextBlock x:Name="ContentSite"
                                   Text="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Left"
                                   Margin="12,0,30,0"
                                   TextTrimming="CharacterEllipsis">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="Visibility" Value="Visible"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                <ContentPresenter IsHitTestVisible="False"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          Margin="12,0,30,0"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Left">
                                    <ContentPresenter.Style>
                                        <Style TargetType="ContentPresenter">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}"/>
                                                        <Condition Binding="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}" Value=""/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ContentPresenter.Style>
                                </ContentPresenter>

                                <TextBlock Text="{TemplateBinding Tag}"
                                   Foreground="{DynamicResource Placeholder.Secondary}"
                                   IsHitTestVisible="False"
                                   VerticalAlignment="Center"
                                   Margin="12,0,0,0">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}"/>
                                                        <Condition Binding="{Binding Text, RelativeSource={RelativeSource Self}}" Value=""/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                <fa:IconImage Icon="ChevronDown"
                                      Width="12" Height="12"
                                      IsHitTestVisible="False"
                                      VerticalAlignment="Center"
                                      HorizontalAlignment="Right"
                                      Margin="0,0,10,0"
                                      Foreground="{TemplateBinding BorderBrush}"/>
                            </Grid>
                        </Border>

                        <Popup x:Name="PART_Popup"
                       IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                       AllowsTransparency="True"
                       Focusable="False"
                       Placement="Bottom"
                       PopupAnimation="Slide">
                            <Border Name="DropDownBorder"
                            MaxHeight="{TemplateBinding MaxDropDownHeight}"
                            MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                            CornerRadius="8"
                            Margin="0,5,0,0"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource Border.Secondary}"
                            Background="{DynamicResource Background.Secondary}">
                                <ScrollViewer>
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SecondaryComboBoxItemStyle" TargetType="ComboBoxItem">
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.Brand.NavyDark}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border Name="Bd"
                    Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"
                    BorderThickness="0"
                    SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Background.SecondaryHover}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>