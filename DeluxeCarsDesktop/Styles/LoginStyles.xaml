<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style x:Key="DarkDatePickerStyle" TargetType="DatePicker"
       BasedOn="{StaticResource MaterialDesignFloatingHintDatePicker}">
        <!-- Personalización general -->
        <Setter Property="Background" Value="{DynamicResource PrimaryBackgroundColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBorderColor}"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Padding" Value="10,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

        <!-- Hint flotante -->
        <Setter Property="materialDesign:HintAssist.Hint" Value="{Binding Tag, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="materialDesign:HintAssist.Foreground" Value="{DynamicResource PlaceholderTextColor}"/>
        <Setter Property="materialDesign:HintAssist.HintOpacity" Value="0.6"/>

        <!-- Ajuste del calendario desplegable -->
        <Setter Property="CalendarStyle">
            <Setter.Value>
                <Style TargetType="Calendar" BasedOn="{StaticResource MaterialDesignDatePickerCalendarPortrait}">
                    <Style.Resources>
                        <SolidColorBrush x:Key="PrimaryHueMidBrush" Color="{DynamicResource Color.Brand.GraySteel}"/>
                        <SolidColorBrush x:Key="PrimaryHueDarkBrush" Color="{DynamicResource Color.Accent.DeepSkyBlue}"/>
                    </Style.Resources>
                </Style>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource HighlightBorderColor}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource HighlightBorderColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DarkLabelForm" TargetType="Label">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>




    <Style x:Key="AppFormComboBoxStyle" TargetType="ComboBox">
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Height" Value="44"/>
        <Setter Property="Margin" Value="0,8"/>
        <Setter Property="Padding" Value="15,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Background" Value="{StaticResource Background.Surface}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Border.Default}"/>
        <Setter Property="Foreground" Value="{StaticResource Text.Primary}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="1"
                        CornerRadius="8">
                        <Grid>
                            <Path x:Name="arrow" Data="M 0 0 L 4 4 L 8 0 Z" Fill="{TemplateBinding Foreground}"
                              HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,15,0"/>

                            <ContentPresenter x:Name="ContentSite"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"/>

                            <TextBlock Text="{TemplateBinding Tag}" Foreground="{StaticResource Text.Secondary}"
                                   IsHitTestVisible="False" VerticalAlignment="Center" Margin="{TemplateBinding Padding}">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Border.Focus}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Border.Focus}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AppFormMultiLineTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource AppFormFieldStyle}">
        <Setter Property="Height" Value="NaN"/>
        <Setter Property="MinHeight" Value="100"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
    </Style>

    <Style x:Key="AppFormFieldStyle" TargetType="TextBox">
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Height" Value="44"/>
        <Setter Property="Margin" Value="0,8"/>
        <Setter Property="Padding" Value="15,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Background" Value="{StaticResource Background.Surface}"/>
        <Setter Property="Foreground" Value="{StaticResource Text.Primary}"/>
        <Setter Property="CaretBrush" Value="{StaticResource Border.Focus}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Border.Default}"/>
        <Setter Property="BorderThickness" Value="1"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="8">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost"
                                      Margin="{TemplateBinding Padding}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                            <TextBlock Text="{TemplateBinding Tag}"
                                   Foreground="{StaticResource Text.Secondary}"
                                   IsHitTestVisible="False"
                                   VerticalAlignment="Center"
                                   Margin="{TemplateBinding Padding}">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value=""/>
                                                    <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}"/>
                                                    <Condition Binding="{Binding IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Border.Focus}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Border.Focus}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FormActionButtonStyle" TargetType="Button" BasedOn="{StaticResource MaterialDesignRaisedButton}">
        <Setter Property="Width" Value="120"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="20"/>
    </Style>

    <Style x:Key="AppDataGridStyle" TargetType="DataGrid" >
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.Neutral.WhitePure}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
        <Setter Property="GridLinesVisibility" Value="Horizontal"/>
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource Background.Surface}"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
        <Setter Property="CanUserResizeColumns" Value="True"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>

        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Foreground" Value="{DynamicResource Text.Primary}"/>
                    <Setter Property="FontFamily" Value="Montserrat"/>
                    <Setter Property="FontSize" Value="18"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                    <Setter Property="Padding" Value="10,12"/>
                    <Setter Property="BorderThickness" Value="0,0,0,2"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource Border.Default}"/>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="RowStyle">
            <Setter.Value>
                <Style TargetType="DataGridRow">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="FontFamily" Value="{DynamicResource Font.Poppins}"/>
                    <Setter Property="MinHeight" Value="45"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Background.Surface.Hover}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Background.Surface.Selected}"/>
                            <Setter Property="Foreground" Value="{DynamicResource Text.Primary}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell">
                    <Setter Property="Padding" Value="10,5"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource Text.Primary}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="ToolTip">
        <Setter Property="Background" Value="{StaticResource Background.Surface}"/>
        <Setter Property="Foreground" Value="{StaticResource Text.Primary}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource Border.Default}"/>
        <Setter Property="Padding" Value="8,5"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <Style x:Key="AppComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource MaterialDesignComboBox}">
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="{StaticResource Text.Secondary}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Background.Disabled}"/>
        <Setter Property="materialDesign:TextFieldAssist.UnderlineBrush"
            Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource AppComboBoxItemStyle}"/>
    </Style>


    <Style x:Key="ElegantShadowGhostButton" TargetType="Button"
       BasedOn="{StaticResource MaterialDesignOutlinedButton}">
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Foreground" Value="{StaticResource Text.Secondary}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="#000000" BlurRadius="8" ShadowDepth="2" Opacity="0.3"/>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect ShadowDepth="0" 
                                  BlurRadius="15" 
                                  Opacity="0.8"
                                  Color="{Binding Path=Tag.Color, RelativeSource={RelativeSource Self}}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect Color="#000000" BlurRadius="10" ShadowDepth="3" Opacity="0.35"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Effect" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>



    <Style x:Key="ElegantGhostButtonStyle" TargetType="Button" BasedOn="{StaticResource MaterialDesignOutlinedButton}">
        <Setter Property="Foreground" Value="DarkGray"/>
        <Setter Property="FontFamily" Value="{DynamicResource Font.SourceSans3}" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0.8"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="17"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>

                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PrimaryActionButtonStyle"
       TargetType="Button"
       BasedOn="{StaticResource MaterialDesignRaisedButton}">
        <Setter Property="Background" Value="{StaticResource Brush.Aggressive.DeepBlue}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="materialDesign:ElevationAssist.Elevation" Value="Dp2"/>

        <Setter Property="Template">
            <Setter.Value>
                <!-- Aquí va el ControlTemplate completo -->
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                Background="{TemplateBinding Background}"
                CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#345A9B"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#2D4F88"/>
                            <Setter Property="materialDesign:ElevationAssist.Elevation" Value="Dp4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!-- Animación inicial para los titulos -->
    <Style x:Key="ProfessionalFadeInStyle" TargetType="FrameworkElement">
        <Style.Triggers>
            <EventTrigger RoutedEvent="Loaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                        Storyboard.TargetProperty="Opacity"
                        From="0" To="1" Duration="0:0:0.7">
                            <DoubleAnimation.EasingFunction>
                                <QuinticEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>

                        <DoubleAnimation
                        Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)"
                        From="20" To="0" Duration="0:0:0.7">
                            <DoubleAnimation.EasingFunction>
                                <QuinticEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>

        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform Y="0"/>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ProfessionalFadeInStyle_Delayed" TargetType="FrameworkElement">
        <Style.Triggers>
            <EventTrigger RoutedEvent="Loaded">
                <BeginStoryboard>
                    <Storyboard BeginTime="0:0:0.1">
                        <DoubleAnimation 
                        Storyboard.TargetProperty="Opacity" 
                        From="0" To="1" Duration="0:0:0.7">
                            <DoubleAnimation.EasingFunction>
                                <QuinticEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimation 
                        Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" 
                        From="20" To="0" Duration="0:0:0.7">
                            <DoubleAnimation.EasingFunction>
                                <QuinticEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform Y="0"/>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>